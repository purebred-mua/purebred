# Contributing

At this early stage we're going a bit fast and loose. There are currently no processes involved contributions.

If you'd like to hack on purebred, either pick an issue from the backlog and
signal with a comment that you'd want to work on it. Most of the issues are very
high level and need clarification when it comes to implementation details. So
communication is the key here rather than hacking away.

## Hacking guidelines for purebred

- do not use hs-notmuch message methods that open file descriptors

- optics are your friend

- use `view`, `review`, `set`, `over` and so on instead of the
  infix optic functions from lens

- use explicit import list or qualified imports

- no perf optimisations without measurements (preferably in the commit
  message)

- use the weakest abstraction possible:
  - traverse > mapM
  - pure > return
  - ``Data.Semigroup.<>`` > ``Data.Monoid.<>`` > ``Data.List.++``
  - and so on...

- For executing subprocesses, use only the functions exported
  from `Purebred.System.Process`.  This is so that output is
  tainted, indicating that it must be sanitised before use.
  (The test suite is excepted from this policy.)


### Style

- HLint is your friend.  But not always.  If you want to suppress a
  hint (e.g.  suppressing "Avoid lambda" for consistent and
  refactoring-friendly lens definitoions), be sure to include an
  explicit type annotation so that it will play nice with
  ``OverloadedStrings``.

    {-# ANN module ("HLint: ignore Avoid lambda" :: String) #-}
